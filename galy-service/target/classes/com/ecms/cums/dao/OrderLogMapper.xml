<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ecms.cums.dao.OrderLogMapper" >
  <resultMap id="BaseResultMap" type="com.ecms.cums.model.OrderLog" >
    <id column="o_log_id" property="oLogId" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="log_type" property="logType" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.ecms.cums.model.OrderLogWithBLOBs" extends="BaseResultMap" >
    <result column="reason_text" property="reasonText" jdbcType="LONGVARCHAR" />
    <result column="req_json" property="reqJson" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    o_log_id, order_id, log_type, create_time, remark
  </sql>
  <sql id="Blob_Column_List" >
    reason_text, req_json
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.ecms.cums.model.OrderLogCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from order_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ecms.cums.model.OrderLogCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from order_log
    where o_log_id = #{oLogId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from order_log
    where o_log_id = #{oLogId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ecms.cums.model.OrderLogCriteria" >
    delete from order_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ecms.cums.model.OrderLogWithBLOBs" >
    <selectKey resultType="java.lang.Integer" keyProperty="oLogId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order_log (order_id, log_type, create_time, 
      remark, reason_text, req_json
      )
    values (#{orderId,jdbcType=INTEGER}, #{logType,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR}, #{reasonText,jdbcType=LONGVARCHAR}, #{reqJson,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ecms.cums.model.OrderLogWithBLOBs" >
    <selectKey resultType="java.lang.Integer" keyProperty="oLogId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="logType != null" >
        log_type,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="reasonText != null" >
        reason_text,
      </if>
      <if test="reqJson != null" >
        req_json,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="logType != null" >
        #{logType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="reasonText != null" >
        #{reasonText,jdbcType=LONGVARCHAR},
      </if>
      <if test="reqJson != null" >
        #{reqJson,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ecms.cums.model.OrderLogCriteria" resultType="java.lang.Integer" >
    select count(*) from order_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update order_log
    <set >
      <if test="record.oLogId != null" >
        o_log_id = #{record.oLogId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.logType != null" >
        log_type = #{record.logType,jdbcType=CHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.reasonText != null" >
        reason_text = #{record.reasonText,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.reqJson != null" >
        req_json = #{record.reqJson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update order_log
    set o_log_id = #{record.oLogId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      log_type = #{record.logType,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      reason_text = #{record.reasonText,jdbcType=LONGVARCHAR},
      req_json = #{record.reqJson,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update order_log
    set o_log_id = #{record.oLogId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      log_type = #{record.logType,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ecms.cums.model.OrderLogWithBLOBs" >
    update order_log
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="logType != null" >
        log_type = #{logType,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="reasonText != null" >
        reason_text = #{reasonText,jdbcType=LONGVARCHAR},
      </if>
      <if test="reqJson != null" >
        req_json = #{reqJson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where o_log_id = #{oLogId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ecms.cums.model.OrderLogWithBLOBs" >
    update order_log
    set order_id = #{orderId,jdbcType=INTEGER},
      log_type = #{logType,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      reason_text = #{reasonText,jdbcType=LONGVARCHAR},
      req_json = #{reqJson,jdbcType=LONGVARCHAR}
    where o_log_id = #{oLogId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ecms.cums.model.OrderLog" >
    update order_log
    set order_id = #{orderId,jdbcType=INTEGER},
      log_type = #{logType,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where o_log_id = #{oLogId,jdbcType=INTEGER}
  </update>
</mapper>